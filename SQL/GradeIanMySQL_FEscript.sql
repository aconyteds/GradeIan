-- MySQL Script generated by MySQL Workbench
-- Mon Jun 22 11:46:42 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';


USE `gradeian` ;

-- -----------------------------------------------------
-- Table `gradeian`.`SecurityQuestions`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`SecurityQuestions` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Question` VARCHAR(500) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Question_UNIQUE` (`Question` ASC),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`AccessLevels`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`AccessLevels` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `AccessLevelLabel` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`License`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`License` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `User_ID` INT NULL,
  `LicenseString` VARCHAR(30) NOT NULL,
  `LicenseLevel_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC),
  UNIQUE INDEX `User_ID_UNIQUE` (`User_ID` ASC),
  UNIQUE INDEX `LicenseString_UNIQUE` (`LicenseString` ASC),
  INDEX `LicenseLevelId_idx` (`LicenseLevel_ID` ASC),
  CONSTRAINT `UserId`
    FOREIGN KEY (`User_ID`)
    REFERENCES `gradeian`.`Users` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `LicenseLevelId`
    FOREIGN KEY (`LicenseLevel_ID`)
    REFERENCES `gradeian`.`AccessLevels` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Users` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `FirstName` VARCHAR(30) NOT NULL,
  `LastName` VARCHAR(30) NOT NULL,
  `email` VARCHAR(100) NOT NULL,
  `SecurityAnswer` VARCHAR(150) NOT NULL,
  `UserName` VARCHAR(25) NOT NULL,
  `SecurityQuestion_ID` INT NOT NULL,
  `FailedLogin` INT NULL,
  `Lockout` DATETIME NULL,
  `License_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC),
  UNIQUE INDEX `email_UNIQUE` (`email` ASC),
  UNIQUE INDEX `UserName_UNIQUE` (`UserName` ASC),
  INDEX `fk_Users_SecurityQuestions1_idx` (`SecurityQuestion_ID` ASC),
  INDEX `fk_Users_License1_idx` (`License_ID` ASC),
  UNIQUE INDEX `License_ID_UNIQUE` (`License_ID` ASC),
  CONSTRAINT `fk_Users_SecurityQuestions1`
    FOREIGN KEY (`SecurityQuestion_ID`)
    REFERENCES `gradeian`.`SecurityQuestions` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Users_License`
    FOREIGN KEY (`License_ID`)
    REFERENCES `gradeian`.`License` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Passwords`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Passwords` (
  `userPassword` BINARY(64) NOT NULL,
  `User_ID` INT NOT NULL,
  PRIMARY KEY (`User_ID`),
  INDEX `fk_Passwords_Users1_idx` (`User_ID` ASC),
  CONSTRAINT `fk_Passwords_Users1`
    FOREIGN KEY (`User_ID`)
    REFERENCES `gradeian`.`Users` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Classes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Classes` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(100) NOT NULL,
  `StartDate` DATE NULL,
  `EndDate` DATE NULL,
  `Teacher_ID` INT NOT NULL,
  `ClassIcon` VARCHAR(25) NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Classes_Users1_idx` (`Teacher_ID` ASC),
  CONSTRAINT `fk_Classes_Users1`
    FOREIGN KEY (`Teacher_ID`)
    REFERENCES `gradeian`.`Users` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Students`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Students` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `StudentName` VARCHAR(100) NOT NULL,
  `StudentEmail` VARCHAR(100) NOT NULL,
  `Creator_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  UNIQUE INDEX `Email_UNIQUE` (`StudentEmail` ASC),
  INDEX `fk_Students_Users1_idx` (`Creator_ID` ASC),
  CONSTRAINT `Creator ID`
    FOREIGN KEY (`Creator_ID`)
    REFERENCES `gradeian`.`Users` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Assignments`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Assignments` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Title` VARCHAR(25) NOT NULL,
  `Weight` INT NOT NULL,
  `Class_ID` INT NOT NULL,
  PRIMARY KEY (`ID`),
  INDEX `fk_Assignments_Classes1_idx` (`Class_ID` ASC),
  CONSTRAINT `fk_Assignments_Classes1`
    FOREIGN KEY (`Class_ID`)
    REFERENCES `gradeian`.`Classes` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Items`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Items` (
  `ID` INT NOT NULL AUTO_INCREMENT,
  `Assignment_ID` INT NOT NULL,
  `Label` VARCHAR(26) NOT NULL,
  `Questions` SMALLINT NULL,
  `Weight` INT NOT NULL,
  PRIMARY KEY (`ID`, `Assignment_ID`),
  UNIQUE INDEX `ID_UNIQUE` (`ID` ASC),
  INDEX `fk_Items_Assignments1_idx` (`Assignment_ID` ASC),
  CONSTRAINT `fk_Items_Assignments1`
    FOREIGN KEY (`Assignment_ID`)
    REFERENCES `gradeian`.`Assignments` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Grades`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Grades` (
  `Grade_ID` INT NOT NULL,
  `Student_ID` INT NOT NULL,
  `Assignment_ID` INT NOT NULL,
  `Grade` DOUBLE NOT NULL,
  `QuestionsCorrect` SMALLINT NULL,
  INDEX `fk_Grades_Students1_idx` (`Student_ID` ASC),
  INDEX `fk_Grades_Items1_idx` (`Assignment_ID` ASC),
  UNIQUE INDEX `Grade_ID_UNIQUE` (`Grade_ID` ASC),
  PRIMARY KEY (`Grade_ID`),
  CONSTRAINT `Students ID`
    FOREIGN KEY (`Student_ID`)
    REFERENCES `gradeian`.`Students` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `Items ID`
    FOREIGN KEY (`Assignment_ID`)
    REFERENCES `gradeian`.`Items` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Tokens`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Tokens` (
  `Token` VARCHAR(100) NOT NULL,
  `ExpirationDate` DATETIME NOT NULL,
  `User_ID` INT NOT NULL,
  UNIQUE INDEX `Token_UNIQUE` (`Token` ASC),
  PRIMARY KEY (`User_ID`),
  UNIQUE INDEX `Users_ID_UNIQUE` (`User_ID` ASC),
  CONSTRAINT `Users ID`
    FOREIGN KEY (`User_ID`)
    REFERENCES `gradeian`.`Users` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `gradeian`.`Roster`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `gradeian`.`Roster` (
  `Class_ID` INT NOT NULL,
  `Student_ID` INT NOT NULL,
  `EnrollmentStatus` VARCHAR(10) NULL COMMENT 'Column to track If the student is still enrolled or withdrawn.',
  INDEX `fk_Roster_Classes1_idx` (`Class_ID` ASC),
  INDEX `fk_Roster_Students1_idx` (`Student_ID` ASC),
  CONSTRAINT `fk_Roster_Classes1`
    FOREIGN KEY (`Class_ID`)
    REFERENCES `gradeian`.`Classes` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Roster_Students1`
    FOREIGN KEY (`Student_ID`)
    REFERENCES `gradeian`.`Students` (`ID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `gradeian` ;

-- -----------------------------------------------------
-- procedure login
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `login` (IN un VARCHAR(30), IN pw BINARY(64))
BEGIN
	DECLARE UserID INT;
    DECLARE login INT;
    DECLARE response INT;
    DECLARE locked INT;
    
    -- See if there is a user already, get the user id
	SELECT ID INTO UserID
    FROM Users
    WHERE UserName = un;
    
    -- Check if the account is locked out
    SELECT ID INTO locked
		FROM Users
		WHERE UserName = un AND Lockout > NOW();
    
    IF UserID IS NULL THEN 
		-- User Name Not Recognized
		SET response = -1;
	ELSEIF locked IS NOT NULL THEN
    -- User account is locked
		SET response = -2;
	ELSE
		-- check if the passwords match for the given user
		SELECT user_id INTO login
		FROM Passwords
		WHERE user_id = UserID AND userPassword = pw;
		
		-- If there is a user ID then we want to generate a token and return it
		IF login IS NOT NULL THEN 
			SET response = login;
			UPDATE Users SET FailedLogin = 0 WHERE UserName=un;
		-- Invalid Login
			ELSE 
				SET response = 0;
				UPDATE Users SET FailedLogin = FailedLogin +1 WHERE UserName=un;
		END IF;
	END IF;
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure generateToken
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `generateToken` (IN userId INT)
BEGIN
	IF (SELECT User_ID 
		FROM Tokens
		WHERE User_ID = userId) IS NOT NULL 
    THEN 
		UPDATE Tokens SET User_ID = userId WHERE User_ID = userId;
	ELSE
		INSERT INTO Tokens (User_ID, token)
			VALUES(userId, "abcd");
    END IF;

    SELECT Token AS response FROM Tokens where User_ID=userId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure checkUserName
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `checkUserName` (IN un VARCHAR(25))
BEGIN
	DECLARE response BOOLEAN;
    
    -- Check to see if a username exists in the db already
    SET response = (SELECT ID
    FROM Users
    WHERE UserName = un) IS NOT NULL;
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure checkEmail
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `checkEmail` (IN userEmail VARCHAR(100))
BEGIN
	DECLARE response BOOLEAN;
    
    SET response = (SELECT ID
		FROM Users
        WHERE email = userEmail) IS NOT NULL;
        
	SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createAccount
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `createAccount` (IN FN VARCHAR(30), IN LN VARCHAR(30), IN email VARCHAR(100), IN SA VARCHAR(150), IN SQ INT, IN UN VARCHAR(25), IN PW BINARY(64), IN LicenseKey VARCHAR(29))
BEGIN
	DECLARE newUserID INT;
    DECLARE response VARCHAR(50);
    
    SELECT ID, User_ID INTO @ID, @UserId
    FROM License
    WHERE LicenseString = LicenseKey;
    
    IF @ID IS NOT NULL
    THEN
		IF @UserId IS NULL
        THEN
			INSERT INTO Users (FirstName, LastName, email, SecurityAnswer, UserName, SecurityQuestion_ID, License_ID)
				VALUES (FN, LN, email, SA, UN, SQ, @ID);
			SELECT ID INTO newUserID
			FROM Users
			WHERE UserName = UN;
			
			UPDATE License 
			SET User_ID = newUserID
			WHERE LicenseString = LicenseKey;
			
			INSERT INTO Passwords(userPassword, User_ID)
				VALUES (PW, newUserID);
			   
			set response = newUserID;
		ELSE
			SET response = 'License String in Use';
		END IF;
	ELSE
		SET response = 'Invalid License Key';
	END IF;
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure authenticate
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `authenticate` (IN cred VARCHAR(100))
BEGIN
	SELECT User_ID as UserId
    from Tokens
    where Tokens.Token=cred AND NOW() < Tokens.ExpirationDate;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createClass
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `createClass` (IN classTitle VARCHAR(100), IN iconString VARCHAR(25), IN teacher INT, IN inStart DATE, IN inEnd DATE)
BEGIN
	INSERT INTO Classes (Title, ClassIcon, Teacher_ID, StartDate, EndDate)
		VALUES (classTitle, iconString, teacher, inStart, inEnd);
        
	SELECT ID from Classes where Title=classTitle AND StartDate = inStart AND EndDate = inEnd AND Teacher_ID = teacher;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure checkStudentEmail
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `checkStudentEmail` (IN Email VARCHAR(100))
BEGIN
	DECLARE response BOOLEAN;
    
    SET response = (SELECT ID
		FROM Students
		WHERE StudentEmail = Email) IS NOT NULL;
        
	SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createStudent
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `createStudent` (IN TeacherID INT, IN SName VARCHAR(100), IN SEmail VARCHAR(100))
BEGIN
	declare taken BOOLEAN;
    
    set taken = (SELECT ID
		FROM Students
        WHERE StudentEmail = SEmail) IS NOT NULL;
	
    IF !taken 
    THEN 
		INSERT INTO Students (StudentName, StudentEmail, Creator_ID)
			VALUES(SName, SEmail, TeacherID);
    END IF;
	
    SELECT ID FROM Students WHERE StudentEmail = SEmail;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getClasses
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getClasses` (IN teacherId INT)
BEGIN
    
    -- Get the classIds of the current classes for the given teacher
    SELECT ID as classId, Title as classTitle,  Teacher_ID as teacherId, ClassIcon as classIcon, StartDate as startDate, EndDate as endDate
    FROM Classes
    WHERE Teacher_ID = teacherId
    ORDER BY StartDate;
    
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getStudentCount
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getStudentCount` (IN classId INT)
BEGIN
	SELECT COUNT(Student_ID) as students
    from Roster
    WHERE Class_ID = classId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getStudent
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getStudent` (IN SearchSTR VARCHAR(100))
BEGIN
	SET SearchSTR = CONCAT("%",SearchStr,"%");
    
	SELECT ID, StudentName as name, StudentEmail as email
    FROM Students
    WHERE (StudentName LIKE SearchSTR) OR (StudentEmail LIKE SearchSTR); 
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure enrollStudent
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `enrollStudent` (IN classId INT, IN studentId INT)
BEGIN
	declare response BOOLEAN;
    
	set response = (SELECT Student_ID
		FROM Roster
		WHERE Class_ID = classId AND Student_ID = studentId) IS NULL;
	if response
    THEN 
		INSERT INTO Roster (Class_ID, Student_ID)
			VALUES (classId, studentId);
    END IF;
	
	SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure withdrawStudent
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `withdrawStudent` (IN classId INT, IN studentId INT)
BEGIN
	DECLARE response BOOLEAN;

	set response = (SELECT Student_ID
		FROM Roster
		WHERE Class_ID = classId AND Student_ID = studentId) IS NOT NULL;
	if response
    THEN 
		DELETE FROM Roster WHERE Class_ID=classId AND Student_ID = studentId;
    END IF;
	
	SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getStudents
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getStudents` (IN classId INT)
BEGIN
    SELECT Students.ID, Students.studentName as name, Students.studentEmail as email
    FROM (SELECT Student_ID as studentId 
		FROM Roster 
        WHERE Class_ID = classId 
			AND (EnrollmentStatus IS NULL 
			OR	( EnrollmentStatus IS NOT NULL AND EnrollmentStatus != 'withdraw'))) 
		as Enrolled
    INNER JOIN Students ON Enrolled.studentId = Students.ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createAssignment
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `createAssignment` (IN classId INT, IN title varchar(50), IN weight INT)
BEGIN
	DECLARE response INT;
    
	INSERT INTO Assignments (Title, Weight, Class_ID)
		VALUES (title, weight, classId);
        
	SET response = LAST_INSERT_ID();
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createAssignmentItem
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `createAssignmentItem` (IN AssignmentId INT, IN title varchar(51), IN questions SMALLINT, IN weight INT)
BEGIN
	DECLARE response INT;
    
	INSERT INTO Items (Assignment_ID, Label, Questions, Weight)
		VALUES (AssignmentId, title, questions, weight);
        
	SET response = LAST_INSERT_ID();
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure unlockAccount
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `unlockAccount` (IN USER_ID INT)
BEGIN
	UPDATE Users
    SET FailedLogin = 0, Lockout = null
    WHERE ID = USER_ID;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getClass
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getClass` (IN classId INT)
BEGIN
	-- Get the classIds of the current classes for the given teacher
    SELECT ID as classId, title as classTitle,  Teacher_ID as teacherId, ClassIcon as classIcon, StartDate as startDate, EndDate as endDate
    FROM Classes
    WHERE ID = classId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getAssignments
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getAssignments` (IN classId INT)
BEGIN
	SELECT DISTINCT Assignments.ID as groupId, Assignments.Title as groupTitle, Assignments.Weight as groupWeight, Items.ID as ID,  Items.Label as label, Items.Weight as weight, Items.Questions as questions
	FROM Assignments INNER JOIN Items 
    ON Assignments.ID = Items.Assignment_ID
    WHERE Assignments.Class_ID = classId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getGrade
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getGrade` (IN student INT, IN assignment INT)
BEGIN
	SELECT Grade_ID as gradeId, Student_ID as studentId, Assignment_ID as assignmentId, Grade as grade, QuestionsCorrect as questionsCorrect
    FROM Grades
    WHERE Assignment_ID = assignmentId AND Student_ID = studentId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure setGrade
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `setGrade` (IN studentId INT, IN assignmentId INT, IN newGrade DOUBLE, IN newQuestionsCorrect INT)
BEGIN
	DECLARE existingEntry BOOLEAN;
    DECLARE response BOOLEAN;
    
    SET response = false;
    
    -- Check to see if a username exists in the db already
    SET existingEntry = (SELECT grade
    FROM Grades
    WHERE Assignment_ID = assignmentId AND Student_ID = studentId) IS NOT NULL;
    
    IF existingEntry THEN 
		UPDATE Grades
		SET grade = newGrade, questionsCorrect = newQuestionsCorrect
		WHERE Assignment_ID = assignmentId AND Student_ID = studentId;
        SET response = true;
	ELSE
		INSERT INTO Grades (Student_ID, Assignment_ID, questionsCorrect, grade)
			VALUES (studentId, assignmentId, newQuestionsCorrect, newGrade);
		set response = true;
    END IF;
    
	SELECT response;
END;$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getAssignmentGrades
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getAssignmentGrades` (IN assignmentId INT)
BEGIN
	SELECT Grade_ID as gradeId, Student_ID as studentId, Assignment_ID as assignmentId, Grade as grade, QuestionsCorrect as questionsCorrect
    FROM Grades
    WHERE Assignment_ID = assignmentId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getStudentGrades
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getStudentGrades` (IN studentId INT)
BEGIN
	SELECT Grade_ID as gradeId, Student_ID as studentId, Assignment_ID as assignmentId, Grade as grade, QuestionsCorrect as questionsCorrect
    FROM Grades
    WHERE Student_ID = studentId;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure createLicense
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `createLicense` (IN LicenseLevel INT)
BEGIN
	DECLARE License VARCHAR(15);
    
    SET License = (SELECT UPPER(CONCAT(SUBSTRING(REPLACE(REPLACE(REPLACE( TO_BASE64(MD5(RAND())), '=',''),'+',''),'/',''), 2, 15))));
    
	INSERT INTO License (LicenseString, LicenseLevel_ID)
		VALUES (License, LicenseLevel);
    
    SELECT License;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure checkToken
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `checkToken` (IN LicenseKey VARCHAR(15))
BEGIN
	DECLARE response VARCHAR(50);
    
	SELECT ID, User_ID INTO @ID, @UserId
    FROM License
    WHERE LicenseString = LicenseKey;
    
    IF @ID IS NOT NULL
    THEN
		IF @UserId IS NULL
        THEN
			SET response = 'License String Available';
			
		ELSE
			SET response = 'License String in Use';    
		END IF;
	ELSE
		SET response = 'Invalid License Key';
	END IF;
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateClass
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `updateClass` (IN classId INT, IN classTitle VARCHAR(100), IN iconString VARCHAR(25), IN inStart DATE, IN inEnd DATE)
BEGIN
	DECLARE response boolean;
    SET response = (SELECT ID from Classes WHERE ID = classId) IS NOT NULL;
    IF response = true
    THEN
		UPDATE Classes
		SET Title = classTitle, ClassIcon = iconString, StartDate = inStart, EndDate = inEnd
		WHERE ID = classId;
	END IF;
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateAssignmentGroup
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `updateAssignmentGroup` (IN groupId INT, IN inTitle VARCHAR(25), IN inWeight INT)
BEGIN
	DECLARE response boolean;
    SET response = (SELECT ID from Assignments WHERE ID = groupId) IS NOT NULL;
    IF response = true
    THEN
		UPDATE Assignments
		SET Title = inTitle, Weight = inWeight
		WHERE ID = groupId;
	END IF;
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure updateAssignmentItem
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `updateAssignmentItem` (IN itemId INT, IN inLabel VARCHAR(26), IN inWeight INT, IN inQuestions SMALLINT)
BEGIN
	DECLARE response boolean;
    SET response = (SELECT ID from Items WHERE ID = itemId) IS NOT NULL;
    IF response = true
    THEN
		UPDATE Items
		SET Label = inLabel, Weight = inWeight, Questions = inQuestions
		WHERE ID = itemId;
	END IF;
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteAssignmentItem
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `deleteAssignmentItem` (IN itemId INT)
BEGIN
	DECLARE response BOOLEAN;
    SET response = true;
    DELETE FROM Grades WHERE Assignment_ID = itemId;
	DELETE FROM Items WHERE ID = itemId;    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure deleteAssignmentGroup
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `deleteAssignmentGroup` (IN groupId INT)
BEGIN
	DECLARE response BOOLEAN;
    SET response = true;
    
	DELETE Grade 
    FROM Grades Grade
    INNER JOIN Items Item
		ON Grade.Assignment_ID = Item.ID
    WHERE Item.Assignment_ID = groupId;
    
    DELETE FROM Items WHERE Assignment_ID = groupId;
    DELETE FROM Assignments WHERE ID = groupId;
    
    SELECT response;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure getAssignmentItems
-- -----------------------------------------------------

DELIMITER $$
USE `gradeian`$$
CREATE PROCEDURE `getAssignmentItems` (IN assignmentId INT)
BEGIN
	SELECT ID, Assignment_ID AS assignmentId, Label AS label, Weight AS weight, Questions as questions
    FROM Items
    WHERE Assignment_ID = assignmentId;
END$$

DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `gradeian`.`SecurityQuestions`
-- -----------------------------------------------------
START TRANSACTION;
USE `gradeian`;
INSERT INTO `gradeian`.`SecurityQuestions` (`ID`, `Question`) VALUES (1, 'Favorite Pet\'s Name');
INSERT INTO `gradeian`.`SecurityQuestions` (`ID`, `Question`) VALUES (2, 'High School Mascot');
INSERT INTO `gradeian`.`SecurityQuestions` (`ID`, `Question`) VALUES (3, 'Street you lived on when you were 10 years old');

COMMIT;


-- -----------------------------------------------------
-- Data for table `gradeian`.`AccessLevels`
-- -----------------------------------------------------
START TRANSACTION;
USE `gradeian`;
INSERT INTO `gradeian`.`AccessLevels` (`ID`, `AccessLevelLabel`) VALUES (1, 'Site Admin');
INSERT INTO `gradeian`.`AccessLevels` (`ID`, `AccessLevelLabel`) VALUES (2, 'Teacher');
INSERT INTO `gradeian`.`AccessLevels` (`ID`, `AccessLevelLabel`) VALUES (3, 'Student');
INSERT INTO `gradeian`.`AccessLevels` (`ID`, `AccessLevelLabel`) VALUES (4, 'Administrator');
INSERT INTO `gradeian`.`AccessLevels` (`ID`, `AccessLevelLabel`) VALUES (5, 'Stakeholder');

COMMIT;

USE `gradeian`;

DELIMITER $$
USE `gradeian`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gradeian`.`Users_BEFORE_INSERT` BEFORE INSERT ON `Users` FOR EACH ROW
BEGIN
	SET NEW.FailedLogin = 0;
END$$

USE `gradeian`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gradeian`.`Users_BEFORE_UPDATE` BEFORE UPDATE ON `Users` FOR EACH ROW
BEGIN
	IF NEW.FailedLogin = 3 THEN 
		SET NEW.Lockout = DATE_ADD(NOW(), INTERVAL 5 minute);
    ELSE 
		IF NEW.FailedLogin = 0 THEN
			SET NEW.Lockout = null;
		END IF;
	END IF;
END$$

USE `gradeian`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gradeian`.`Tokens_BEFORE_INSERT` BEFORE INSERT ON `Tokens` FOR EACH ROW
BEGIN
	SET NEW.ExpirationDate = DATE_ADD(NOW(), INTERVAL 2 HOUR);
    SET NEW.Token = REPLACE(CONCAT(MD5(RAND()),MD5(RAND())), '+', '/');
END$$

USE `gradeian`$$
CREATE DEFINER = CURRENT_USER TRIGGER `gradeian`.`Tokens_BEFORE_UPDATE` BEFORE UPDATE ON `Tokens` FOR EACH ROW
BEGIN
	SET NEW.ExpirationDate = DATE_ADD(NOW(), INTERVAL 2 HOUR);
    SET NEW.Token = REPLACE(CONCAT(MD5(RAND()),MD5(RAND())), '+', '/');
END$$


DELIMITER ;
